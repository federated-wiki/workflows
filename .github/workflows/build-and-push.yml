name: "Build and push"

on:
  workflow_call:
    inputs:

      ref:
        description: "Reference for a git object to check out"
        required: false
        default: ${{ github.ref }}
        type: string

      image-name:
        description: "Mandatory name of the image to build"
        required: true
        type: string
        default: ${{ github.event.repository.name }}

      build-args:
        description: "Optional build arguments, takes a YAML multiline string | with ENV=variables"
        required: false
        type: string
      image-tags:
        description: "Optional additional image tags, takes a YAML multiline string |"
        required: false
        type: string
      context:
        description: "Optional build context, defaults to the ref that triggered the run, and not ./ in the checkout root"
        required: false
        type: string
        default: .
      file:
        description: "Optional path to a Dockerfile to build, relative to the build context"
        required: false
        type: string

      github:
        description: "Optional toggle for disabling GitHub Container Registry"
        default: true
        required: false
        type: boolean
#      docker:
#        description: "Optional toggle for disabling Docker Hub Registry"
#        default: true
#        required: false
#        type: boolean

    outputs:
      # https://github.com/docker/build-push-action#outputs
      imageid:
        description: "Image ID, String"
        value: ${{ jobs.build-and-push.outputs.imageid }}
      digest:
        description: "Image digest, String"
        value: ${{ jobs.build-and-push.outputs.digest }}
      metadata:
        description: "Build result metadata, JSON"
        value: ${{ jobs.build-and-push.outputs.metadata }}

jobs:

  build-and-push:

    name: Build and push image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      packages: write

    outputs:
      imageid:  ${{ steps.build-push.outputs.imageid }}
      digest:   ${{ steps.build-push.outputs.digest }}
      metadata: ${{ steps.build-push.outputs.metadata }}

    steps:

    -
      name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.ref }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    -
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    -
      name: Docker meta
      id: meta
      uses: docker/metadata-action@v4
      with:
        context: git
        images: |
          name=ghcr.io/${{ github.repository_owner }}/${{ inputs.image-name }},enable=${{ inputs.github }}
#          name=docker.io/${{ vars.DH_ORGANIZATION }}/${{ inputs.image-name }},enable=${{ inputs.docker }}
        labels: |
          org.opencontainers.image.title=${{ inputs.image-name }}
          org.opencontainers.image.vendor=Federated Wiki Community Initiative
          org.opencontainers.image.description=A federated wiki version packaged in a Node.js LTS container, running unprivileged.
          org.opencontainers.image.licenses=MIT

        tags: |
          latest
          type=semver,pattern={{version}}
          {{ tag }}
          {{ base_ref }}
          {{ branch }}
          {{ sha }}
          ${{ inputs.image-tags }}

    # -
    #   name: Login to Docker Hub Registry
    #   uses: docker/login-action@v3
    #   if: inputs.docker
    #   with:
    #     registry: "docker.io"
    #     username: "${{ secrets.DOCKERHUB_USERNAME }}"
    #     password: "${{ secrets.DOCKERHUB_TOKEN }}"

    -
      name: Login to GitHub Packages Registry
      uses: docker/login-action@v3
      if: inputs.github
      with:
        registry: "ghcr.io"
        username: "${{ github.repository_owner }}"
        password: "${{ secrets.GITHUB_TOKEN }}"

    -
      name: Build and push Container image
      uses: docker/build-push-action@v5
      id: build-push
      with:
        push: true
        provenance: false
        context:    "${{ inputs.context }}"
        platforms:  linux/amd64,linux/arm64
        file:       "${{ inputs.file }}"
        build-args: "${{ inputs.build-args }}"
        labels:     "${{ steps.meta.outputs.labels }}"
        tags:       "${{ steps.meta.outputs.tags }}"
